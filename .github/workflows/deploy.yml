name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push the docker images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script_stop: true
        envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        script: |
          mkdir -p ~/deploy_guide
          cat > ~/deploy_guide/deploy_container.sh << 'EOL'
          #!/bin/bash
          # This script pulls and runs the latest Docker image from ECR

          # Exit if any command fails
          set -e

          # Variables
          ECR_REGISTRY=${ECR_REGISTRY}
          ECR_REPOSITORY=${ECR_REPOSITORY}
          IMAGE_TAG=${IMAGE_TAG}

          # Update system packages
          sudo apt-get update

          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce
              sudo usermod -aG docker ubuntu
          fi

          # Install Nginx if not installed
          if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo apt-get install -y nginx
          fi

          # Install AWS CLI v2 if not installed
          if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              sudo apt-get install -y unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
          fi

          # Create nginx config if it doesn't exist
          if [ ! -f "/etc/nginx/sites-available/streamlit" ]; then
              echo "Creating Nginx configuration..."
              cat > /tmp/streamlit_nginx << 'NGINX_EOL'
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://localhost:8501;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
                  proxy_read_timeout 86400;
              }
          }
          NGINX_EOL
              sudo cp /tmp/streamlit_nginx /etc/nginx/sites-available/streamlit
              sudo ln -sf /etc/nginx/sites-available/streamlit /etc/nginx/sites-enabled/
              sudo rm -f /etc/nginx/sites-enabled/default
              sudo nginx -t
              sudo systemctl restart nginx
          fi

          # Login to ECR
          echo "Logging in to Amazon ECR..."
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}

          # Stop any running container
          echo "Stopping any existing container..."
          sudo docker stop streamlit-container 2>/dev/null || true
          sudo docker rm streamlit-container 2>/dev/null || true

          # Pull the latest image
          echo "Pulling the latest image from ECR..."
          sudo docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          # Run the container
          echo "Starting the container..."
          sudo docker run -d --name streamlit-container -p 8501:8501 --restart always ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

          echo "Deployment completed successfully!"
          EOL
          
          chmod +x ~/deploy_guide/deploy_container.sh
          ~/deploy_guide/deploy_container.sh